#include <SFML/Window.hpp>
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
struct verlet
{
public:
	sf::CircleShape* circle = new sf::CircleShape();
	sf::Vector2f curPos;
	sf::Vector2f acc;
	sf::Vector2f vel;

	verlet(float a, sf::Vector2f ini)
	{
		circle->setRadius(a);
		curPos = ini;
		vel = { 0, 0 };
		acc = { 0, 1 };
	}

	void update()
	{
		// const sf::Vector2f velocity = {curPos.x - oldPos.x,curPos.y - oldPos.y};
		// const sf::Vector2f velocity = curPos - oldPos;
		// curPos.x = curPos.x + velocity.x + acc.x * dt * dt;
		// curPos.y = curPos.y + velocity.y + acc.y * dt * dt;
		curPos = curPos + vel;
		vel = vel + acc;
	}
	// void accelerate(sf::Vector2f accm)
	// {
	// 	acc += accm;
	// }
};

int main()
{
	sf::RenderWindow window(sf::VideoMode(900, 900), "Phy6", sf::Style::Close | sf::Style::Titlebar);
	window.setFramerateLimit(60);
	vector<verlet> all;

	float radius = 40.f;

	//event loop / game loop
	while (window.isOpen())
	{
		sf::Event ent;
		//if there are any pending events
		while (window.pollEvent(ent))
		{
			if (ent.type == sf::Event::Closed)
				window.close();
		}

		if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
		{
			sf::Vector2i localPosition = sf::Mouse::getPosition(window);
			verlet cir(radius, (sf::Vector2f)localPosition);
			all.push_back(cir);
		}
		else if (sf::Mouse::isButtonPressed(sf::Mouse::Right))
		{
			all.clear();
		}
		for (unsigned int i = 0; i < all.size(); i += 4)
		{
			all[i].circle->setPosition(all[i].curPos);
			all[i].update();
			if (all[i].curPos.y > 600)
			{
				all[i].curPos.y = 600;
				all[i].vel.y = 0;
				all[i].acc.y = 0;
			}
		}

		window.clear();
		for (unsigned int i = 0; i < all.size(); i += 4)
			window.draw(*all[i].circle);

		window.display();
	}
	return 0;
}